name: Production Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # Matches v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allow manual trigger

env:
  DOCKER_USERNAME: houtj1990
  IMAGE_PREFIX: hill-sequence

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version from tag
        id: get-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Building version: $VERSION"
      
      - name: Validate semantic version
        run: |
          if [[ ! ${{ steps.get-version.outputs.version }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version tag. Must be v1.2.3 format"
            exit 1
          fi
          echo "‚úÖ Version tag is valid"

  build-and-push:
    needs: validate-tag
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: backend
            directory: hill_backend
          - service: frontend
            directory: hill_frontend
          - service: worker
            directory: hill_workers
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.directory }}
          file: ./${{ matrix.directory }}/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ needs.validate-tag.outputs.version }}
            ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Image pushed successfully
        run: |
          echo "‚úÖ ${{ matrix.service }} image pushed"
          echo "Tags:"
          echo "  - ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ needs.validate-tag.outputs.version }}"
          echo "  - ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:latest"

  create-release:
    needs: [validate-tag, build-and-push]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-tag.outputs.version }}
          release_name: Release ${{ needs.validate-tag.outputs.version }}
          body: |
            ## üöÄ Hill Sequence ${{ needs.validate-tag.outputs.version }}
            
            ### Docker Images
            
            All images have been published to DockerHub:
            
            - `${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-backend:${{ needs.validate-tag.outputs.version }}`
            - `${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-frontend:${{ needs.validate-tag.outputs.version }}`
            - `${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_PREFIX }}-worker:${{ needs.validate-tag.outputs.version }}`
            
            ### Quick Deployment
            
            ```bash
            # Create deployment directory
            mkdir hill-app && cd hill-app
            
            # Download required files
            curl -O https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.prod.yml
            curl -O https://raw.githubusercontent.com/${{ github.repository }}/main/env.example
            curl -O https://raw.githubusercontent.com/${{ github.repository }}/main/init-mongo.js
            
            # Configure environment
            cp env.example .env
            # Edit .env with your Azure OpenAI credentials
            
            # Deploy with specific version
            export VERSION=${{ needs.validate-tag.outputs.version }}
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d
            ```
            
            ### Upgrade from Previous Version
            
            ```bash
            export VERSION=${{ needs.validate-tag.outputs.version }}
            docker-compose -f docker-compose.prod.yml pull
            docker-compose -f docker-compose.prod.yml up -d
            ```
            
            See [README.md](https://github.com/${{ github.repository }}/blob/main/README.md) for full documentation.
          draft: false
          prerelease: false

